package db

import (
	"database/sql"
	_"encoding/json"
	"fmt"
	"testing"
	"log"
	"os"
)

var (
	DB *Connector
)

type User struct {
	Pwd  string `db:"password"`
	User string `db:"user",pk:"yes",auto:"no"`
	Host string `db:"host"`
}

func Test_to(t *testing.T) {
	fmt.Println("==== testing query =====")
	DB.Query("SELECT user,host FROM mysql.user", func(rows *sql.Rows) {
			fmt.Println(ConvRowsToMapForJson(rows))

			rows.Close()
		})
	t.Log("11")
}

func Test_model(t *testing.T) {
	fmt.Println("===== testing model =======")
	var usr User
	DB.ORM.Get(&usr, "root")
	fmt.Println("User:" + usr.User)
	fmt.Println("Pwd:" + usr.Pwd)
	fmt.Println("Host:" + usr.Host)
}



func Test_Select(t *testing.T) {
	fmt.Println("===== testing select model =======")
	for i := 0; i < 3; i++ {
		var usrs []User
		DB.ORM.Select(&usrs, User{User: "root"}, "")
		if i == 0 {
			fmt.Println(usrs)
		}
	}
}

func Test_insermodel(t *testing.T){
	i,i2,err := DB.ORM.Save(nil,User{Host:"localhost",User:"uu1",Pwd:"1233455"})
	fmt.Println(i,i2,err)

	var usr User
	DB.ORM.Get(&usr,"uu1")
	fmt.Println("Inserted :",usr)

}

func Test_delmodel(t *testing.T){
	fmt.Println("===== testing deleting model =======")

	return;


	var usr User
	DB.ORM.Get(&usr, "root")
	i,err := DB.ORM.Delete(usr,"")
	fmt.Sprintln("%d rows deleted",i)
	if err!=nil{
		fmt.Sprintln("happend error:%s",err.Error())
	}
}


func init() {
	log.SetOutput(os.Stdout)
	DB = NewConnector("mysql",
		"root:@tcp(localhost:3306)/mysql?charset=utf8")
	DB.ORM.CreateTableMap(User{}, "user")
	DB.ORM.SetTrace(true)
}

